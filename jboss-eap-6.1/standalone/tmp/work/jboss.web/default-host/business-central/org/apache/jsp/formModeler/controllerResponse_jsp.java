package org.apache.jsp.formModeler;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.jbpm.formModeler.service.bb.mvc.components.FactoryURL;
import org.jbpm.formModeler.service.LocaleManager;
import org.jbpm.formModeler.service.bb.mvc.components.FactoryURL;
import org.jbpm.formModeler.service.LocaleManager;
import org.jbpm.formModeler.core.processing.FormProcessor;
import org.jbpm.formModeler.core.processing.formRendering.FormRenderingFormatter;
import org.jbpm.formModeler.service.bb.mvc.components.ControllerStatus;
import org.apache.commons.lang.StringUtils;
import org.jbpm.formModeler.service.bb.mvc.controller.HTTPSettings;

public final class controllerResponse_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List _jspx_dependants;

  static {
    _jspx_dependants = new java.util.ArrayList(3);
    _jspx_dependants.add("/formModeler/js/ajax.jsp");
    _jspx_dependants.add("/formModeler/js/ajaxMonitor.jsp");
    _jspx_dependants.add("/formModeler/index.jsp");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fi18n_005fmessage_0026_005fkey_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ffactory_005fuseComponent_0026_005fbean_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fstatic_005fimage_0026_005frelativePath_005fnobody;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public Object getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fi18n_005fmessage_0026_005fkey_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ffactory_005fuseComponent_0026_005fbean_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fstatic_005fimage_0026_005frelativePath_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody.release();
    _005fjspx_005ftagPool_005fi18n_005fmessage_0026_005fkey_005fnobody.release();
    _005fjspx_005ftagPool_005ffactory_005fuseComponent_0026_005fbean_005fnobody.release();
    _005fjspx_005ftagPool_005fstatic_005fimage_0026_005frelativePath_005fnobody.release();
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      response.addHeader("X-Powered-By", "JSP/2.2");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title></title>\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/css/styles.css\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/css/ui-lightness/jquery-ui-1.10.2.custom.min.css\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/css/jquery-ui-timepicker-addon.css\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/css/jquery.treeview.css\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(request.getContextPath());
      out.write("/css/bootstrap.min.css\" media=\"screen\">\n");
      out.write("</head>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      //  i18n:bundle
      org.apache.taglibs.i18n.BundleTag _jspx_th_i18n_005fbundle_005f0 = (org.apache.taglibs.i18n.BundleTag) _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody.get(org.apache.taglibs.i18n.BundleTag.class);
      _jspx_th_i18n_005fbundle_005f0.setPageContext(_jspx_page_context);
      _jspx_th_i18n_005fbundle_005f0.setParent(null);
      // /formModeler/js/ajax.jsp(21,0) name = baseName type = null reqTime = true required = true fragment = false deferredValue = false deferredMethod = false expectedTypeName = null methodSignature = null 
      _jspx_th_i18n_005fbundle_005f0.setBaseName("org.jbpm.formModeler.service.mvc.messages");
      // /formModeler/js/ajax.jsp(21,0) name = locale type = null reqTime = true required = false fragment = false deferredValue = false deferredMethod = false expectedTypeName = null methodSignature = null 
      _jspx_th_i18n_005fbundle_005f0.setLocale( LocaleManager.currentLocale() );
      int _jspx_eval_i18n_005fbundle_005f0 = _jspx_th_i18n_005fbundle_005f0.doStartTag();
      if (_jspx_th_i18n_005fbundle_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody.reuse(_jspx_th_i18n_005fbundle_005f0);
        return;
      }
      _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody.reuse(_jspx_th_i18n_005fbundle_005f0);
      out.write("\n");
      out.write("\n");
      out.write("// JBoss Inc. All rights reserved.\n");
      out.write("\n");
      out.write("// Boundary for multipart forms.  DO NOT CHANGE IT !!!\n");
      out.write("var boundary = \"JBOSS_AJAX_Boundary_\" + new Date().getMilliseconds() * new Date().getMilliseconds() * new Date().getMilliseconds();\n");
      out.write("var ajaxAlertsEnabled = false;\n");
      out.write("var ajaxRequestNumber = 0;\n");
      out.write("var ajaxMaxRequestNumber = ");
      out.print(request.getParameter("maxAjaxRequestAllowed") != null ? request.getParameter("maxAjaxRequestAllowed") : "50");
      out.write(";\n");
      out.write("\n");
      out.write("var IE = false;\n");
      out.write("var NS = false;\n");
      out.write("var FX = false;\n");
      out.write("var OP = false;\n");
      out.write("var CH = false;\n");
      out.write("var DHTML_support = false;\n");
      out.write("var navigatorVersion = 0;\n");
      out.write("checkBrowser();\n");
      out.write("\n");
      out.write("function checkBrowser() {\n");
      out.write("    var userAgent = navigator.userAgent;\n");
      out.write("    if (userAgent.indexOf('Netscape') != -1) {\n");
      out.write("        navigatorVersion = parseFloat(userAgent.substring(userAgent.indexOf('Netscape') + 9, userAgent.length));\n");
      out.write("        NS = true;\n");
      out.write("    } else if (userAgent.indexOf('MSIE') != -1) {\n");
      out.write("        navigatorVersion = parseFloat(userAgent.substring(userAgent.indexOf('MSIE') + 4, userAgent.length));\n");
      out.write("        IE = true;\n");
      out.write("        DHTML_support = navigatorVersion >= 5;\n");
      out.write("    } else if (userAgent.indexOf('Firefox') != -1) {\n");
      out.write("        navigatorVersion = parseFloat(userAgent.substring(userAgent.indexOf('Firefox') + 1, userAgent.length));\n");
      out.write("        FX = true;\n");
      out.write("    } else if (userAgent.indexOf('Opera') != -1) {\n");
      out.write("        navigatorVersion = parseFloat(userAgent.substring(userAgent.indexOf('Opera') + 1, userAgent.length));\n");
      out.write("        OP = true;\n");
      out.write("    } else if (userAgent.indexOf('Chrome') != -1) {\n");
      out.write("        var startPos = userAgent.indexOf('Chrome') + 1;\n");
      out.write("        var endPos = userAgent.indexOf(\" \", startPos);\n");
      out.write("        navigatorVersion = parseFloat(userAgent.substring(startPos, endPos));\n");
      out.write("        CH = true;\n");
      out.write("    }\n");
      out.write("};\n");
      out.write("\n");
      out.write("/**\n");
      out.write("* Loads a given url into element with id tagId. If a body is specified, it uses multipart content-type\n");
      out.write("* to POST to the url.\n");
      out.write("*/\n");
      out.write("\n");
      out.write("var value;\n");
      out.write("function ajaxRequest(url, body, tagId) {\n");
      out.write("    return ajaxRequest(url, body, tagId, null, null);\n");
      out.write("};\n");
      out.write("\n");
      out.write("function ajaxRequest(url, body, tagId, onAjaxRequestScript, onAjaxResponseScript) {\n");
      out.write("    var ajaxHandler = new Object();\n");
      out.write("    url = url.replace(/&amp;/g,'&');\n");
      out.write("    ajaxHandler.ajaxRequestScript = onAjaxRequestScript;\n");
      out.write("    ajaxHandler.ajaxResponseScript = onAjaxResponseScript;\n");
      out.write("    if (ajaxAlertsEnabled) alert(\"ajax request: \" + url + \"\\nbody:\\n\" + body + \"\\n\\non \" + tagId);\n");
      out.write("    beforeAjaxRequest();\n");
      out.write("    ajaxHandler.ajaxTarget = tagId;\n");
      out.write("\n");
      out.write("    // Execute the ajaxRequestScript specified by client.\n");
      out.write("    if (onAjaxRequestScript != null) eval(onAjaxRequestScript);\n");
      out.write("\n");
      out.write("    if (window.XMLHttpRequest) {\n");
      out.write("        ajaxHandler.ajaxReq = new XMLHttpRequest();\n");
      out.write("    }\n");
      out.write("    else if (window.ActiveXObject) {\n");
      out.write("        ajaxHandler.ajaxReq = new ActiveXObject('Microsoft.XMLHTTP');\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    ajaxHandler.ajaxResponse = function(){\n");
      out.write("        // Only if req shows \"complete\"\n");
      out.write("        var readyState, status;\n");
      out.write("        try{\n");
      out.write("            readyState = ajaxHandler.ajaxReq.readyState;\n");
      out.write("            if (readyState == 4){\n");
      out.write("                status = ajaxHandler.ajaxReq.status;}\n");
      out.write("        }\n");
      out.write("        catch(e){\n");
      out.write("        }\n");
      out.write("        if (readyState == 4) {\n");
      out.write("            // only if \"OK\"\n");
      out.write("            if (status == 200) {\n");
      out.write("                var targetElementId;\n");
      out.write("                if (ajaxHandler.ajaxReq.responseText.indexOf(\"<html>\")!=-1){\n");
      out.write("                    //alert(\"Workspace response contains an html tag. Doing my best with \"+ajaxHandler.ajaxReq.responseText);\n");
      out.write("                    //document.location.href = '");
      out.print(request.getRequestURI());
      out.write("';\n");
      out.write("                    value = ajaxHandler.ajaxReq.responseText;\n");
      out.write("                    setTimeout(\"document.write(value);document.close()\",1);\n");
      out.write("                } else {\n");
      out.write("                    var element = document.getElementById(ajaxHandler.ajaxTarget);\n");
      out.write("\n");
      out.write("                    targetElementId = element.id;\n");
      out.write("                    var newElement = document.createElement(element.tagName);\n");
      out.write("                    newElement.id = element.id;\n");
      out.write("                    //alert(\"Setting \"+ ajaxHandler.ajaxReq.responseText);\n");
      out.write("                    newElement.innerHTML = ajaxHandler.ajaxReq.responseText;\n");
      out.write("                    if (ajaxAlertsEnabled) alert(\"Set \" + newElement.outerHTML);\n");
      out.write("\n");
      out.write("                    // remove embedded objects from the old content to avoid js errors caused by flash\n");
      out.write("                    var objs = element.getElementsByTagName(\"object\");\n");
      out.write("                    if (objs) {\n");
      out.write("                        for(var i=0; i < objs.length; i++){\n");
      out.write("                            objs[i].parentNode.removeChild(objs[i]);\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    element.parentNode.replaceChild(newElement, element);\n");
      out.write("                    // Execute the ajaxResponseScript specified by client.\n");
      out.write("                    if (ajaxHandler.ajaxResponseScript != null) eval(ajaxHandler.ajaxResponseScript);\n");
      out.write("                    try{\n");
      out.write("                        if ( tt_Init )\n");
      out.write("                            tt_Init(); /*Evaluate tooltips*/\n");
      out.write("                    } catch(e){/*Ignore errors on tooltip evaluation*/}\n");
      out.write("                    element = null;\n");
      out.write("                    newElement=null;\n");
      out.write("\n");
      out.write("                    // Parsea Script elements y los coloca en el HEAD para evitar problema de Firefox 6/7 / Chrome\n");
      out.write("                    if (FX || CH) {\n");
      out.write("                        var ob = document.getElementById(targetElementId).getElementsByTagName(\"script\");\n");
      out.write("                        var head = document.getElementsByTagName(\"head\")[0];\n");
      out.write("                        // pasamos los elementos SCRIPT al HEAD\n");
      out.write("                        for(var i=0; i < ob.length; i++){\n");
      out.write("                                script = document.createElement('script');\n");
      out.write("                                script.type = 'text/javascript';\n");
      out.write("                                if(ob[i].src != \"\" && ob[i].src != null){\n");
      out.write("                                    script.src = ob[i].src;\n");
      out.write("                                }else{\n");
      out.write("                                    script.text = ob[i].text;\n");
      out.write("                                }\n");
      out.write("                                head.appendChild(script);\n");
      out.write("                        }\n");
      out.write("                        // borramos los elementos SCRIPT del target original\n");
      out.write("                        for(var i=0; i < ob.length; i++){\n");
      out.write("                            ob[i].parentNode.removeChild(ob[i]);\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            afterAjaxRequest();\n");
      out.write("            ajaxHandler.ajaxTarget = '';\n");
      out.write("            ajaxRequestNumber++;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    var ajaxLoadingDivTimeout;\n");
      out.write("    function beforeAjaxRequest(){\n");
      out.write("        ajaxLoadingDivTimeout = setTimeout('if(document.body)document.body.style.cursor = \"wait\";if(document.getElementById(\\'ajaxLoadingDiv\\')); document.getElementById(\\'ajaxLoadingDiv\\').style.display=\\'block\\'',300);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function afterAjaxRequest(){\n");
      out.write("        if(document.body)document.body.style.cursor = 'default';\n");
      out.write("        if ( ajaxLoadingDivTimeout ) clearTimeout(ajaxLoadingDivTimeout);\n");
      out.write("        if(document.getElementById('ajaxLoadingDiv')) document.getElementById('ajaxLoadingDiv').style.display='none';\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    var ajaxReq = ajaxHandler.ajaxReq;\n");
      out.write("    if (ajaxReq != null) {\n");
      out.write("        ajaxReq.onreadystatechange = ajaxHandler.ajaxResponse;\n");
      out.write("        if (body) {\n");
      out.write("            ajaxReq.open('POST', url, true);\n");
      out.write("            //XMLHttpRequest handles only UTF-8\n");
      out.write("            ajaxReq.setRequestHeader(\"Content-Type\", \"multipart/form-data; charset=UTF-8; boundary=\" + boundary);\n");
      out.write("        } else {\n");
      out.write("            ajaxReq.open('GET', url, true);\n");
      out.write("        }\n");
      out.write("        if (ajaxAlertsEnabled)\n");
      out.write("            alert(\"Sending body:\\n\" + body);\n");
      out.write("        ajaxReq.send(body);\n");
      out.write("        if (ajaxAlertsEnabled)\n");
      out.write("            alert(\"Loading \" + url + \" into \" + tagId);\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("    return true;\n");
      out.write("};\n");
      out.write("\n");
      out.write("function getBody(element) {\n");
      out.write("    var body = '';\n");
      out.write("    if (element && element.name) {\n");
      out.write("        body += '--' + boundary + '\\r\\n';\n");
      out.write("        body += 'Content-Disposition: form-data; name=\"' + element.name + '\"' + '\\r\\n\\r\\n';\n");
      out.write("        body += element.value + '\\r\\n';\n");
      out.write("    }\n");
      out.write("    return body;\n");
      out.write("};\n");
      out.write("\n");
      out.write("/**\n");
      out.write("* Returns the body multipart representation for a form, adding an ajaxAction parameter.\n");
      out.write("*/\n");
      out.write("function getFormBody(form) {\n");
      out.write("    return getFormBody(form, true);\n");
      out.write("};\n");
      out.write("\n");
      out.write("/**\n");
      out.write("* Returns the body multipart representation for a form, adding an ajaxAction parameter, depending on second parameter.\n");
      out.write("*/\n");
      out.write("function getFormBody(form, addAjaxParameter) {\n");
      out.write("    var body = '';\n");
      out.write("    for (var i = 0; i < form.length; i++) {\n");
      out.write("        field = form[i];\n");
      out.write("        if (!field.name || field.name=='')\n");
      out.write("            continue;\n");
      out.write("        if (field.type == 'checkbox' || field.type == 'radio') {\n");
      out.write("            if (field.checked)\n");
      out.write("                body += getBody(field);\n");
      out.write("        }\n");
      out.write("        else if ((field.type == 'select-one' || field.type == 'select-multiple')) {\n");
      out.write("            for (var j = 0; j < field.length; j++) {\n");
      out.write("                if (field[j].selected) {\n");
      out.write("                    value = field[j].value;\n");
      out.write("                    if (value == '') value = field[j].text;\n");
      out.write("                    body += '--' + boundary + '\\r\\n';\n");
      out.write("                    body += 'Content-Disposition: form-data; name=\"' + field.name + '\"' + '\\r\\n\\r\\n';\n");
      out.write("                    body += value + '\\r\\n';\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        else {\n");
      out.write("            body += getBody(field);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    if(addAjaxParameter){\n");
      out.write("        if(ajaxAlertsEnabled)\n");
      out.write("            alert(\"Adding ajax parameter to form to be sent\");\n");
      out.write("        body += '--' + boundary + '\\r\\n';\n");
      out.write("        body += 'Content-Disposition: form-data; name=\"ajaxAction\"' + '\\r\\n\\r\\n';\n");
      out.write("        body += 'true\\r\\n';\n");
      out.write("    }\n");
      out.write("    else{\n");
      out.write("        if(ajaxAlertsEnabled)\n");
      out.write("            alert(\"Getting form body without ajax parameter: \"+addAjaxParameter);\n");
      out.write("    }\n");
      out.write("    body += \"--\" + boundary;\n");
      out.write("    form=null;\n");
      out.write("    return body + \"--\";\n");
      out.write("};\n");
      out.write("\n");
      out.write("var ajaxPreviousHandlers = new Object();\n");
      out.write("\n");
      out.write("function setAjaxTarget(element, targetId) {\n");
      out.write("    return setAjaxTarget(element, targetId,  null,  null);\n");
      out.write("};\n");
      out.write("\n");
      out.write("function submitAjaxForm(form) {\n");
      out.write("    if (form) {\n");
      out.write("        if (form.onsubmit && (ajaxRequestNumber < ajaxMaxRequestNumber)) {\n");
      out.write("            var wasAjaxed = false;\n");
      out.write("            var formClass = form.styleClass;\n");
      out.write("            if (formClass) {\n");
      out.write("                 wasAjaxed = formClass.indexOf('ajaxedElement') != -1;\n");
      out.write("            }\n");
      out.write("            if(wasAjaxed) {\n");
      out.write("                form.onsubmit();\n");
      out.write("            }\n");
      out.write("            else if (form.onsubmit()) {\n");
      out.write("                submitForm(form);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        else {\n");
      out.write("            submitForm(form);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function submitForm(form) {\n");
      out.write("    if (form) {\n");
      out.write("        // Double click control.\n");
      out.write("        form.onsubmit = function() {\n");
      out.write("            processDoubleClick();\n");
      out.write("            return false;\n");
      out.write("        };\n");
      out.write("        // Submit the form.\n");
      out.write("        form.submit();\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function processDoubleClick() {\n");
      out.write("\tvar message = \"");
      if (_jspx_meth_i18n_005fmessage_005f0(_jspx_page_context))
        return;
      out.write("\";\n");
      out.write("    alert(message);\n");
      out.write("}\n");
      out.write("\n");
      out.write("function sendFormToHandler(form, component, property){\n");
      out.write("    prepareFormForHandler(form, component, property);\n");
      out.write("    submitAjaxForm(form);\n");
      out.write("};\n");
      out.write("\n");
      out.write("function prepareFormForHandler(form, component, property){\n");
      out.write("    setFormInputValue(form, '");
      out.print(FactoryURL.PARAMETER_BEAN);
      out.write("', component );\n");
      out.write("    setFormInputValue(form, '");
      out.print(FactoryURL.PARAMETER_PROPERTY);
      out.write("', property );\n");
      out.write("    setFormInputValue(form, '");
      out.print(FactoryURL.DISPATCH_ACTION);
      out.write("', \"_factory\" );\n");
      out.write("};\n");
      out.write("\n");
      out.write("function getFormInputValue( form, name ){\n");
      out.write("    for (var i = 0; i < form.length; i++) {\n");
      out.write("        var field = form[i];\n");
      out.write("        if (!field.name) continue;\n");
      out.write("        if(field.name == name){\n");
      out.write("            return field.value;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    return null;\n");
      out.write("};\n");
      out.write("\n");
      out.write("function setFormInputValue( form, name, value ){\n");
      out.write("    for (var i = 0; i < form.length; i++) {\n");
      out.write("        var field = form[i];\n");
      out.write("        if (!field.name) continue;\n");
      out.write("        if(field.name == name){\n");
      out.write("            field.value = value;\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    var theHidden = document.createElement('input');\n");
      out.write("    theHidden.type = 'hidden';\n");
      out.write("    theHidden.name = name;\n");
      out.write("    theHidden.value = value;\n");
      out.write("    form.appendChild(theHidden);\n");
      out.write("    form=null;\n");
      out.write("};\n");
      out.write("\n");
      out.write("function setAjaxTarget(element, targetId, onAjaxRequestScript, onAjaxResponseScript) {\n");
      out.write("    var elementClass = element.styleClass;\n");
      out.write("    if ( elementClass ){\n");
      out.write("        var wasAjaxed = elementClass.indexOf('ajaxedElement') != -1;\n");
      out.write("        if ( wasAjaxed ) return;\n");
      out.write("        element.styleClass += ' ajaxedElement';\n");
      out.write("    }\n");
      out.write("    if (element.nodeName.toLowerCase() == \"a\") {\n");
      out.write("        var destination = element.href;\n");
      out.write("        if (element.onclick) eval('ajaxPreviousHandlers[\\'' + element.id + '\\']=element.onclick;');\n");
      out.write("        element.onclick = function() {\n");
      out.write("\n");
      out.write("            // Double click control.\n");
      out.write("            if (element) {\n");
      out.write("                element.onclick = function() {\n");
      out.write("                    processDoubleClick();\n");
      out.write("                    return false;\n");
      out.write("                };\n");
      out.write("            }\n");
      out.write("            // Evaluate first the user defined 'onclick' function (if any).\n");
      out.write("            var clickReturn = true;\n");
      out.write("            if ( ajaxPreviousHandlers[this.id] ){\n");
      out.write("                clickReturn = ajaxPreviousHandlers[this.id]();\n");
      out.write("                //alert(\"There is a previous handler \"+ajaxPreviousHandlers[this.id]+\" that says \" + clickReturn);\n");
      out.write("            }\n");
      out.write("            // Process the link.\n");
      out.write("            if (clickReturn != false) {\n");
      out.write("                // Check max consecutive ajax request.\n");
      out.write("                if (ajaxRequestNumber >= ajaxMaxRequestNumber) return true;\n");
      out.write("                eval(\"ret = ajaxRequest('\" + destination + \"&ajaxAction=true', null, '\" + targetId + \"', '\" + onAjaxRequestScript + \"', '\" + onAjaxResponseScript + \"')\");\n");
      out.write("                element=null;\n");
      out.write("                return ret;\n");
      out.write("            } else {\n");
      out.write("                element=null;\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("        element = null;\n");
      out.write("    }\n");
      out.write("    else if (element.nodeName.toLowerCase() == \"form\") {\n");
      out.write("        var containsFileInputs = false;\n");
      out.write("        if (element.elements) {\n");
      out.write("            for( elementIndex=0; elementIndex < element.elements.length; elementIndex++){\n");
      out.write("                var inputElement = element.elements[elementIndex];\n");
      out.write("                if( inputElement.type == 'file' ){\n");
      out.write("                    containsFileInputs = true;\n");
      out.write("                    break;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        if (containsFileInputs && !isFileUploadSupported()) {\n");
      out.write("            if(ajaxAlertsEnabled)alert('Form containing file inputs cannot be set to use Ajax');\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("        else {\n");
      out.write("            if(ajaxAlertsEnabled)alert('Form not containing file inputs can be set to use Ajax');\n");
      out.write("        }\n");
      out.write("        if (element.onsubmit) {\n");
      out.write("            eval('ajaxPreviousHandlers[\\'' + element.id + '\\']=element.onsubmit;');\n");
      out.write("        }\n");
      out.write("        //alert(\"Putting new onsubmit for \"+element.id);\n");
      out.write("        element.onsubmit = function() {\n");
      out.write("\n");
      out.write("            // Double click control.\n");
      out.write("            if (element) {\n");
      out.write("                element.onsubmit = function() {\n");
      out.write("                    processDoubleClick();\n");
      out.write("                    return false;\n");
      out.write("                };\n");
      out.write("            }\n");
      out.write("            // Evaluate first the user defined 'onsubmit' function (if any).\n");
      out.write("            var clickReturn = true;\n");
      out.write("            if ( ajaxPreviousHandlers[this.id] ){\n");
      out.write("                clickReturn = ajaxPreviousHandlers[this.id]();\n");
      out.write("                //alert(\"There is a previous handler \"+ajaxPreviousHandlers[this.id]+\" that says \" + clickReturn);\n");
      out.write("            }\n");
      out.write("            // Submit the form.\n");
      out.write("            if (clickReturn != false) {\n");
      out.write("                var ret = false;\n");
      out.write("                // Check max consecutive ajax request.\n");
      out.write("                if (ajaxRequestNumber >= ajaxMaxRequestNumber) return true;\n");
      out.write("                eval(\"ret = ajaxRequest(this.action?this.action:'Controller', getFormBody(this, true), '\" + targetId + \"', '\" + onAjaxRequestScript + \"', '\" + onAjaxResponseScript + \"');\");\n");
      out.write("                return ret;\n");
      out.write("            } else {\n");
      out.write("                element=null;\n");
      out.write("                return false;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    } else {\n");
      out.write("        if (ajaxAlertsEnabled)\n");
      out.write("            alert(\"Unsupported element nodeName \" + element.nodeName);\n");
      out.write("    }\n");
      out.write("    return true;\n");
      out.write("};\n");
      out.write("\n");
      out.write("/**\n");
      out.write("* Modifies an item (form or anchor).\n");
      out.write("*/\n");
      out.write("function doSetAjax(elementId) {\n");
      out.write("    return doSetAjax(elementId, null, null);\n");
      out.write("};\n");
      out.write("/**\n");
      out.write("* Modifies an item (form or anchor),\n");
      out.write("*/\n");
      out.write("function doSetAjax(elementId, onAjaxRequestScript, onAjaxResponseScript) {\n");
      out.write("    if (window.XMLHttpRequest || window.ActiveXObject) {\n");
      out.write("        if (ajaxAlertsEnabled) alert(\"Looking for area enclosing \" + elementId)\n");
      out.write("        var element = document.getElementById(elementId);\n");
      out.write("        if (!element) {\n");
      out.write("            if (ajaxAlertsEnabled) alert(\"No item with id \" + elementId + \" found.\");\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("        var parentElement = element.parentNode;\n");
      out.write("        while (parentElement) {\n");
      out.write("            if (parentElement && parentElement.id && (parentElement.id.indexOf(\"");
      out.print(HTTPSettings.AJAX_AREA_PREFFIX);
      out.write("\") == 0)) {\n");
      out.write("                if (ajaxAlertsEnabled) alert(\"Found \" + parentElement.id);\n");
      out.write("                var retValue = setAjaxTarget(element, parentElement.id, onAjaxRequestScript, onAjaxResponseScript);\n");
      out.write("                element = null;\n");
      out.write("                parentElement = null;\n");
      out.write("                return retValue;\n");
      out.write("            }\n");
      out.write("            parentElement = parentElement.parentNode;\n");
      out.write("        }\n");
      out.write("        if (ajaxAlertsEnabled) {\n");
      out.write("            alert(\"Cannot find area envolving item with id \" + elementId);\n");
      out.write("        }\n");
      out.write("        element = null;\n");
      out.write("        parentElement = null;\n");
      out.write("    }\n");
      out.write("};\n");
      out.write("\n");
      out.write("function setAjax(elementId) {\n");
      out.write("    return setAjax(elementId, null, null);\n");
      out.write("};\n");
      out.write("\n");
      out.write("function setAjax(elementId, onAjaxRequestScript, onAjaxResponseScript) {\n");
      out.write("    if (ajaxRequestNumber > ajaxMaxRequestNumber) return false;\n");
      out.write("    if (NS || IE || OP || FX || CH) setTimeout(\"doSetAjax('\" + elementId + \"', '\" + onAjaxRequestScript + \"', '\" + onAjaxResponseScript + \"')\", 1);\n");
      out.write("};\n");
      out.write("\n");
      out.write("function isFileUploadSupported() {\n");
      out.write("    return false;\n");
      out.write("};");
      out.write("\n");
      out.write("    ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      //  i18n:bundle
      org.apache.taglibs.i18n.BundleTag _jspx_th_i18n_005fbundle_005f1 = (org.apache.taglibs.i18n.BundleTag) _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody.get(org.apache.taglibs.i18n.BundleTag.class);
      _jspx_th_i18n_005fbundle_005f1.setPageContext(_jspx_page_context);
      _jspx_th_i18n_005fbundle_005f1.setParent(null);
      // /formModeler/js/ajaxMonitor.jsp(25,0) name = baseName type = null reqTime = true required = true fragment = false deferredValue = false deferredMethod = false expectedTypeName = null methodSignature = null 
      _jspx_th_i18n_005fbundle_005f1.setBaseName("org.jbpm.formModeler.core.processing.fieldHandlers.messages");
      // /formModeler/js/ajaxMonitor.jsp(25,0) name = locale type = null reqTime = true required = false fragment = false deferredValue = false deferredMethod = false expectedTypeName = null methodSignature = null 
      _jspx_th_i18n_005fbundle_005f1.setLocale(LocaleManager.currentLocale());
      int _jspx_eval_i18n_005fbundle_005f1 = _jspx_th_i18n_005fbundle_005f1.doStartTag();
      if (_jspx_th_i18n_005fbundle_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody.reuse(_jspx_th_i18n_005fbundle_005f1);
        return;
      }
      _005fjspx_005ftagPool_005fi18n_005fbundle_0026_005flocale_005fbaseName_005fnobody.reuse(_jspx_th_i18n_005fbundle_005f1);
      out.write("\n");
      out.write("\n");
      out.write("function ismaxlength(obj) {\n");
      out.write("    var mlength = obj.getAttribute? parseInt(obj.getAttribute(\"maxlength\")) : \"\"\n");
      out.write("    if (obj.getAttribute && obj.value.length > mlength)\n");
      out.write("        obj.value = obj.value.substring(0, mlength)\n");
      out.write("}\n");
      out.write("\n");
      out.write("var lastFormChangedElement;\n");
      out.write("var lastFormChangeTimeout;\n");
      out.write("\n");
      out.write("function initialFormCalculations(input) {\n");
      out.write("    if (input && input.id) {\n");
      out.write("        if (IE && document.readyState != 'complete') {\n");
      out.write("            setTimeout(\"initialFormCalculations(document.getElementById('\" + input.id + \"'))\", 100);\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("        processFormInputChange(input);\n");
      out.write("        input=null;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function processFormInputChange(element) {\n");
      out.write("    if(!element || !element.id) return;\n");
      out.write("    if (lastFormChangedElement){\n");
      out.write("        var lastId = lastFormChangedElement.id;\n");
      out.write("        var thisId = element.id;\n");
      out.write("        lastId = lastId.substring(0, lastId.lastIndexOf('");
      out.print(FormProcessor.NAMESPACE_SEPARATOR);
      out.write("'));\n");
      out.write("        thisId = thisId.substring(0, thisId.lastIndexOf('");
      out.print(FormProcessor.NAMESPACE_SEPARATOR);
      out.write("'));\n");
      out.write("        if( lastId != thisId){\n");
      out.write("            doprocessFormInputChange(lastFormChangedElement);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("    lastFormChangedElement = element;\n");
      out.write("    if ( lastFormChangeTimeout ) {\n");
      out.write("        clearTimeout(lastFormChangeTimeout);\n");
      out.write("    }\n");
      out.write("    lastFormChangeTimeout = setTimeout('checkChangeDDMTrigger()', 1);\n");
      out.write("}\n");
      out.write("\n");
      out.write("function checkChangeDDMTrigger() {\n");
      out.write("    if (IE && document.readyState != 'complete') {\n");
      out.write("        setTimeout(\"checkChangeDDMTrigger()\",100);\n");
      out.write("    } else {\n");
      out.write("        doprocessFormInputChange(lastFormChangedElement);\n");
      out.write("        lastFormChangeTimeout = null;\n");
      out.write("        lastFormChangedElement = null;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function clearChangeDDMTrigger() {\n");
      out.write("    if ( lastFormChangeTimeout ) {\n");
      out.write("        clearTimeout(lastFormChangeTimeout);\n");
      out.write("    }\n");
      out.write("    lastFormChangeTimeout = null;\n");
      out.write("    lastFormChangedElement = null;\n");
      out.write("    return true;\n");
      out.write("}\n");
      out.write("\n");
      out.write("function doprocessFormInputChange(element) {\n");
      out.write("    if( !element || !element.id || !document.getElementById(element.id) || !element.form || !element.name ){\n");
      out.write("        return;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    if (IE && document.readyState != 'complete') {\n");
      out.write("        setTimeout(\"doprocessFormInputChange(document.getElementById('\" + element.id + \"'))\", 100);\n");
      out.write("        return;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    var form = element.form;\n");
      out.write("    var elementName = element.name;\n");
      out.write("\n");
      out.write("    var _backup_bean = getFormInputValue(form, '");
      out.print(FactoryURL.PARAMETER_BEAN);
      out.write("');\n");
      out.write("    var _backup_prop = getFormInputValue(form, '");
      out.print(FactoryURL.PARAMETER_PROPERTY);
      out.write("');\n");
      out.write("    var _backup_pAction = getFormInputValue(form, 'pAction');\n");
      out.write("    /*var _backup_FormAction = form.action; */\n");
      out.write("\n");
      out.write("    prepareFormForHandler(form, 'org.jbpm.formModeler.core.processing.formProcessing.FormChangeHandler', 'process');\n");
      out.write("    setFormInputValue( form, 'modifiedFieldName', elementName );\n");
      out.write("    var formBody = getFormBody(form, false);\n");
      out.write("\n");
      out.write("    setFormInputValue(form, '");
      out.print(FactoryURL.PARAMETER_BEAN);
      out.write("', _backup_bean);\n");
      out.write("    setFormInputValue(form, '");
      out.print(FactoryURL.PARAMETER_PROPERTY);
      out.write("', _backup_prop);\n");
      out.write("    setFormInputValue(form, 'pAction', _backup_pAction);\n");
      out.write("    /*form.action = _backup_FormAction; */\n");
      out.write("\n");
      out.write("    var url = \"Controller\";\n");
      out.write("    var formProcessor = new Object();\n");
      out.write("    formProcessor.onresponse = function() {\n");
      out.write("    var readyState, status;\n");
      out.write("    try{\n");
      out.write("        readyState = formProcessor.formRequest.readyState;\n");
      out.write("        if (readyState == 4)\n");
      out.write("            status = formProcessor.formRequest.status;\n");
      out.write("    }\n");
      out.write("    catch(e){\n");
      out.write("    }\n");
      out.write("    if (readyState == 4) {\n");
      out.write("        // only if \"OK\"\n");
      out.write("        if (status == 200) {\n");
      out.write("                var xmlResponse = formProcessor.formRequest.responseXML;\n");
      out.write("                //alert(\"Received response \"+formProcessor.formRequest.responseText);\n");
      out.write("                if (xmlResponse != null) {\n");
      out.write("                    //alert(\"Received XML response \"+xmlResponse);\n");
      out.write("                    var setValues = xmlResponse.documentElement.getElementsByTagName('setvalue');\n");
      out.write("                    //alert(\"setValues=\"+setValues+\" with size \"+ (setValues?setValues.length:0) );\n");
      out.write("                    for (i = 0; i < setValues.length; i++) {\n");
      out.write("                        var fieldId = setValues[i].getAttribute(\"name\");\n");
      out.write("                        var fieldValue = setValues[i].getAttribute(\"value\");\n");
      out.write("                        /*alert(\"Putting field \"+fieldId+\" = \"+fieldValue);*/\n");
      out.write("                        if (form.elements[fieldId]){\n");
      out.write("                            form.elements[fieldId].value = fieldValue;\n");
      out.write("                        }\n");
      out.write("                        var elms = document.getElementsByName(fieldId+'_showContainer') ;\n");
      out.write("                        if ( elms ) {\n");
      out.write("                            for ( j = 0; j < elms.length; j++ ) {\n");
      out.write("                                elms[j].innerHTML = fieldValue;\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                    var setListValues = xmlResponse.documentElement.getElementsByTagName('setListValues');\n");
      out.write("                    //alert(\"setListValues =\"+setListValues+\" with size \"+ (setListValues?setListValues.length:0) );\n");
      out.write("                    for (i = 0; i < setListValues.length; i++) {\n");
      out.write("                        var fieldId = setListValues[i].getAttribute(\"name\");\n");
      out.write("                        var formField =  form.elements[fieldId];\n");
      out.write("                        if ( formField && formField.nodeName ) {\n");
      out.write("                            if ( formField && formField.nodeName.toLowerCase() == 'select') {\n");
      out.write("                                ");
      out.write("\n");
      out.write("                                var optionsToAdd = setListValues[i].getElementsByTagName(\"option\");\n");
      out.write("                                if(newOptionsImplyChange(optionsToAdd, formField, formField.multiple)){\n");
      out.write("                                    ");
      out.write("\n");
      out.write("                                    if (formField.multiple) formField.options.length=0;\n");
      out.write("                                    else formField.options.length=1;\n");
      out.write("                                    if(optionsToAdd.length>0){\n");
      out.write("                                        formField.disabled = false;\n");
      out.write("                                        for(j = 0; j<optionsToAdd.length; j++){\n");
      out.write("                                            var optionToAdd = optionsToAdd[j];\n");
      out.write("                                            var option = new Option(optionToAdd.getAttribute(\"text\"), optionToAdd.getAttribute(\"value\") );\n");
      out.write("                                            if ( \"true\" == optionToAdd.getAttribute(\"selected\") ) option.selected = true;\n");
      out.write("                                            formField.options[formField.options.length]=option;\n");
      out.write("                                            ");
      out.write("\n");
      out.write("                                        }\n");
      out.write("                                    } else {\n");
      out.write("                                        if (formField.multiple) formField.options.length=0;\n");
      out.write("                                        else formField.options.length=1;\n");
      out.write("                                        formField.selectedIndex = 0;\n");
      out.write("                                        formField.disabled = true;\n");
      out.write("                                    }\n");
      out.write("                                }\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    var setFieldStyleValues = xmlResponse.documentElement.getElementsByTagName('setFieldStyle');\n");
      out.write("                    processElementsStyle(setFieldStyleValues);\n");
      out.write("                    var setFieldStyleValues = xmlResponse.documentElement.getElementsByTagName('setLabelStyle');\n");
      out.write("                    processElementsStyle(setFieldStyleValues);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    if (window.XMLHttpRequest) {\n");
      out.write("        formProcessor.formRequest = new XMLHttpRequest();\n");
      out.write("    }\n");
      out.write("    else if (window.ActiveXObject) {\n");
      out.write("        formProcessor.formRequest = new ActiveXObject('Microsoft.XMLHTTP');\n");
      out.write("    }\n");
      out.write("    if (formProcessor.formRequest != null) {\n");
      out.write("        formProcessor.formRequest.onreadystatechange = formProcessor.onresponse;\n");
      out.write("        if (formBody) {\n");
      out.write("            formProcessor.formRequest.open('POST', url, true);\n");
      out.write("            formProcessor.formRequest.setRequestHeader(\"Content-Type\", \"multipart/form-data; charset=UTF-8; boundary=\" + boundary);\n");
      out.write("        } else {\n");
      out.write("            formProcessor.formRequest.open('GET', url, true);\n");
      out.write("        }\n");
      out.write("        if (ajaxAlertsEnabled){\n");
      out.write("            alert(\"Sending to: \"+url);\n");
      out.write("            alert(\"Sending body:\\n\" + formBody);\n");
      out.write("        }\n");
      out.write("        formProcessor.formRequest.send(formBody);\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("\n");
      out.write("function newOptionsImplyChange(optionsToAdd, formField, multiple) {\n");
      out.write("    var offset = multiple ? 0 : 1;\n");
      out.write("    if (formField.options.length < optionsToAdd.length) return true;\n");
      out.write("    if (formField.options.length - offset > optionsToAdd.length) return true;\n");
      out.write("    if (formField.disabled) return true;\n");
      out.write("    for(j = 0; j<optionsToAdd.length; j++) {\n");
      out.write("        var optionToAdd = optionsToAdd[j];\n");
      out.write("        if ( !formField.options[j+offset] ) {\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("        if(formField.options[j+offset].value != optionToAdd.getAttribute(\"value\")) {\n");
      out.write("            //alert(\"Form field value=\"+formField.options[j+offset].value+\", instruction.value=\"+optionToAdd.getAttribute(\"value\"));\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("        if(formField.options[j+offset].text != optionToAdd.getAttribute(\"text\")) {\n");
      out.write("            //alert(\"Form field text=\"+formField.options[j+offset].text+\", instruction.text=\"+optionToAdd.getAttribute(\"text\"));\n");
      out.write("            return true;\n");
      out.write("        }\n");
      out.write("        var optionToAddSelected = (\"true\" == optionToAdd.getAttribute(\"selected\") );\n");
      out.write("        if(optionToAddSelected != formField.options[j+offset].selected ) return true;\n");
      out.write("    }\n");
      out.write("    //alert(\"No need to modify this select... received options are the same.\");\n");
      out.write("}\n");
      out.write("\n");
      out.write("function processElementsStyle(setFieldStyleValues) {\n");
      out.write("    //alert(\"setFieldStyleValues=\"+setFieldStyleValues+\" with size \"+ (setFieldStyleValues?setFieldStyleValues.length:0) );\n");
      out.write("    for (var i = 0; i < setFieldStyleValues.length; i++) {\n");
      out.write("        var fieldId = setFieldStyleValues[i].getAttribute(\"name\");\n");
      out.write("        var fieldValue = setFieldStyleValues[i].getAttribute(\"value\");\n");
      out.write("        //alert(\"Putting field style for  \"+fieldId+\" = \"+fieldValue);\n");
      out.write("\n");
      out.write("        var container = document.getElementById(fieldId+\"_container\");\n");
      out.write("        if (container) {\n");
      out.write("            container.style.cssText = fieldValue;\n");
      out.write("            if ( container.style.display=='none' ) {\n");
      out.write("               container.style.cssText = 'display:none';\n");
      out.write("            } else {\n");
      out.write("               container.style.cssText = '");
      out.print(FormRenderingFormatter.FIELD_CONTAINER_STYLE);
      out.write("';\n");
      out.write("            }\n");
      out.write("            propagateStyleToChildElements(container, fieldValue);\n");
      out.write("        } else {\n");
      out.write("            //alert(\"No container for \"+fieldId);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function propagateStyleToChildElements(container, style) {\n");
      out.write("    //alert (\"Propagating \"+style+\" to childElements in \"+container);\n");
      out.write("    var allElements = container.childNodes;\n");
      out.write("    for (var j=0 ; j < allElements.length; j++) {\n");
      out.write("        var elm = allElements[j];\n");
      out.write("        if (elm && elm.className && elm.className.indexOf('dynInputStyle')==0){\n");
      out.write("            elm.style.cssText = style;\n");
      out.write("            //alert(\"Style applied to \"+elm);\n");
      out.write("        }\n");
      out.write("        if (!elm.id || (elm.id && elm.id.indexOf(\"_container\")==-1)) {\n");
      out.write("            propagateStyleToChildElements(elm, style);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("\n");
      out.write("function getDefinedCssClasses(){\n");
      out.write("    var result = new Array();\n");
      out.write("    if (document.styleSheets) {\n");
      out.write("        for (var i=0; i<document.styleSheets.length; i++) {\n");
      out.write("          var styleSheet=document.styleSheets[i];\n");
      out.write("            var rules;\n");
      out.write("            if (styleSheet.cssRules) {\n");
      out.write("              rules = styleSheet.cssRules;\n");
      out.write("            } else {\n");
      out.write("              rules = styleSheet.rules;\n");
      out.write("            }\n");
      out.write("           for(j=0; j<rules.length; j++){\n");
      out.write("               cssRule = rules[j];\n");
      out.write("               if(cssRule.selectorText.indexOf('.')==0 && cssRule.selectorText.indexOf(':')==-1 )\n");
      out.write("                  result.push(cssRule.selectorText.substring(1));\n");
      out.write("           }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    return result;\n");
      out.write("}\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/js/jquery-1.9.1.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/js/jquery-ui-1.10.2.custom.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/js/jquery-ui-sliderAccess.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/js/jquery-ui-timepicker-addon.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/js/jquery.treeview.min.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/ckeditor/ckeditor.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath());
      out.write("/formModeler/ckeditor/ckeditor_handler.js\"></script>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<div id='");
      out.print(HTTPSettings.AJAX_AREA_PREFFIX + "main_component");
      out.write("'>\n");
      out.write("    ");
      if (_jspx_meth_factory_005fuseComponent_005f0(_jspx_page_context))
        return;
      out.write("\n");
      out.write("</div>");
      out.write("\n");
      out.write("<div id=\"ajaxLoadingDiv\" style=\"position:absolute;position: absolute; left: 50%; top: 50%; z-index: 6000; opacity: 0.6; display: none;\">\n");
      out.write("    <img  src=\"");
      if (_jspx_meth_static_005fimage_005f0(_jspx_page_context))
        return;
      out.write("\">\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_i18n_005fmessage_005f0(PageContext _jspx_page_context)
          throws Throwable {
    PageContext pageContext = _jspx_page_context;
    JspWriter out = _jspx_page_context.getOut();
    //  i18n:message
    org.apache.taglibs.i18n.MessageTag _jspx_th_i18n_005fmessage_005f0 = (org.apache.taglibs.i18n.MessageTag) _005fjspx_005ftagPool_005fi18n_005fmessage_0026_005fkey_005fnobody.get(org.apache.taglibs.i18n.MessageTag.class);
    _jspx_th_i18n_005fmessage_005f0.setPageContext(_jspx_page_context);
    _jspx_th_i18n_005fmessage_005f0.setParent(null);
    // /formModeler/js/ajax.jsp(300,16) name = key type = null reqTime = true required = true fragment = false deferredValue = false deferredMethod = false expectedTypeName = null methodSignature = null 
    _jspx_th_i18n_005fmessage_005f0.setKey("ajax.doubleClickWarn");
    int _jspx_eval_i18n_005fmessage_005f0 = _jspx_th_i18n_005fmessage_005f0.doStartTag();
    if (_jspx_th_i18n_005fmessage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fi18n_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_i18n_005fmessage_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fi18n_005fmessage_0026_005fkey_005fnobody.reuse(_jspx_th_i18n_005fmessage_005f0);
    return false;
  }

  private boolean _jspx_meth_factory_005fuseComponent_005f0(PageContext _jspx_page_context)
          throws Throwable {
    PageContext pageContext = _jspx_page_context;
    JspWriter out = _jspx_page_context.getOut();
    //  factory:useComponent
    org.jbpm.formModeler.service.bb.mvc.taglib.factory.UseComponentTag _jspx_th_factory_005fuseComponent_005f0 = (org.jbpm.formModeler.service.bb.mvc.taglib.factory.UseComponentTag) _005fjspx_005ftagPool_005ffactory_005fuseComponent_0026_005fbean_005fnobody.get(org.jbpm.formModeler.service.bb.mvc.taglib.factory.UseComponentTag.class);
    _jspx_th_factory_005fuseComponent_005f0.setPageContext(_jspx_page_context);
    _jspx_th_factory_005fuseComponent_005f0.setParent(null);
    // /formModeler/index.jsp(24,4) name = bean type = null reqTime = true required = true fragment = false deferredValue = false deferredMethod = false expectedTypeName = null methodSignature = null 
    _jspx_th_factory_005fuseComponent_005f0.setBean("org.jbpm.formModeler.service.bb.mvc.components.CurrentComponentRenderer");
    int _jspx_eval_factory_005fuseComponent_005f0 = _jspx_th_factory_005fuseComponent_005f0.doStartTag();
    if (_jspx_th_factory_005fuseComponent_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005ffactory_005fuseComponent_0026_005fbean_005fnobody.reuse(_jspx_th_factory_005fuseComponent_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005ffactory_005fuseComponent_0026_005fbean_005fnobody.reuse(_jspx_th_factory_005fuseComponent_005f0);
    return false;
  }

  private boolean _jspx_meth_static_005fimage_005f0(PageContext _jspx_page_context)
          throws Throwable {
    PageContext pageContext = _jspx_page_context;
    JspWriter out = _jspx_page_context.getOut();
    //  static:image
    org.jbpm.bui.taglib.ImageResolverTag _jspx_th_static_005fimage_005f0 = (org.jbpm.bui.taglib.ImageResolverTag) _005fjspx_005ftagPool_005fstatic_005fimage_0026_005frelativePath_005fnobody.get(org.jbpm.bui.taglib.ImageResolverTag.class);
    _jspx_th_static_005fimage_005f0.setPageContext(_jspx_page_context);
    _jspx_th_static_005fimage_005f0.setParent(null);
    // /formModeler/controllerResponse.jsp(44,15) name = relativePath type = null reqTime = true required = true fragment = false deferredValue = false deferredMethod = false expectedTypeName = null methodSignature = null 
    _jspx_th_static_005fimage_005f0.setRelativePath("general/loading.gif");
    int _jspx_eval_static_005fimage_005f0 = _jspx_th_static_005fimage_005f0.doStartTag();
    if (_jspx_th_static_005fimage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
      _005fjspx_005ftagPool_005fstatic_005fimage_0026_005frelativePath_005fnobody.reuse(_jspx_th_static_005fimage_005f0);
      return true;
    }
    _005fjspx_005ftagPool_005fstatic_005fimage_0026_005frelativePath_005fnobody.reuse(_jspx_th_static_005fimage_005f0);
    return false;
  }
}
